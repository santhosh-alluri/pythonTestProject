{
  "uid" : "a9b0a123064dd0b6",
  "name" : "test_company_overview",
  "fullName" : "Tests.test_company_overview.Test_CompanyOverview#test_company_overview",
  "historyId" : "5ccb5911223bd14f7dd4b1c66a495591",
  "time" : {
    "start" : 1611669519448,
    "stop" : 1611669520473,
    "duration" : 1025
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'Symbol'",
  "statusTrace" : "self = <test_company_overview.Test_CompanyOverview testMethod=test_company_overview>\n\n    @pytest.mark.skipif(False, reason=\"skipping because flag is set to false in excel\")\n    def test_company_overview(self):\n        self.logger.info(\"test started\")\n        url = self.base_url+\"function=OVERVIEW&symbol=\"+self.symbol+\"&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n    \n        self.logger.info(\"response : \"+ response.text)\n    \n        # verify status code\n        self.assertion.assert_equal(response.status_code, 200 ,\"Expected status code is 200 but found \"+str(response.status_code))\n    \n        # header validation\n        self.assertion.assert_equal(response.headers.get('Content-Type'), \"application/json\",\n                         \"Expected Content-Type is application/json but found \"+ response.headers.get('Content-Type'))\n    \n        # symbol validation\n>       self.assertion.assert_equal(response_json['Symbol'] , \"IBM\",\n                         \"Expected symbol is IBM but found \"+ response_json['Symbol'])\nE       KeyError: 'Symbol'\n\nTests/test_company_overview.py:31: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_CompanyOverview",
    "time" : {
      "start" : 1611669519448,
      "stop" : 1611669519448,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'Symbol'",
    "statusTrace" : "self = <test_company_overview.Test_CompanyOverview testMethod=test_company_overview>\n\n    @pytest.mark.skipif(False, reason=\"skipping because flag is set to false in excel\")\n    def test_company_overview(self):\n        self.logger.info(\"test started\")\n        url = self.base_url+\"function=OVERVIEW&symbol=\"+self.symbol+\"&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n    \n        self.logger.info(\"response : \"+ response.text)\n    \n        # verify status code\n        self.assertion.assert_equal(response.status_code, 200 ,\"Expected status code is 200 but found \"+str(response.status_code))\n    \n        # header validation\n        self.assertion.assert_equal(response.headers.get('Content-Type'), \"application/json\",\n                         \"Expected Content-Type is application/json but found \"+ response.headers.get('Content-Type'))\n    \n        # symbol validation\n>       self.assertion.assert_equal(response_json['Symbol'] , \"IBM\",\n                         \"Expected symbol is IBM but found \"+ response_json['Symbol'])\nE       KeyError: 'Symbol'\n\nTests/test_company_overview.py:31: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "36f95fa4bfd3a125",
      "name" : "log",
      "source" : "36f95fa4bfd3a125.txt",
      "type" : "text/plain",
      "size" : 506
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_CompanyOverview::0",
    "time" : {
      "start" : 1611669523354,
      "stop" : 1611669523354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='skipping because flag is set to false in excel')"
  }, {
    "name" : "parentSuite",
    "value" : "Tests"
  }, {
    "name" : "suite",
    "value" : "test_company_overview"
  }, {
    "name" : "subSuite",
    "value" : "Test_CompanyOverview"
  }, {
    "name" : "host",
    "value" : "san-ThinkPad-T480"
  }, {
    "name" : "thread",
    "value" : "289006-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Tests.test_company_overview"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.skipif(False, reason='skipping because flag is set to false in excel')" ]
  },
  "source" : "a9b0a123064dd0b6.json",
  "parameterValues" : [ ]
}