{
  "uid" : "448093bc977ae289",
  "name" : "test_global_quote",
  "fullName" : "Tests.test_global_quote.Test_GlobalQuote#test_global_quote",
  "historyId" : "a4f0e8f6c95eaf1d767849de5f25c711",
  "time" : {
    "start" : 1611645533902,
    "stop" : 1611645535185,
    "duration" : 1283
  },
  "status" : "broken",
  "statusMessage" : "TypeError: assert_equal() got an unexpected keyword argument 'msg'",
  "statusTrace" : "self = <test_global_quote.Test_GlobalQuote testMethod=test_global_quote>\n\n    def test_global_quote(self):\n        self.logger.info(\"test started\")\n        url = self.base_url+\"function=GLOBAL_QUOTE&symbol=\"+self.symbol+\"&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n    \n        self.logger.info(\"response : \"+ response.text)\n    \n        # verify status code\n        self.assertion.assert_equal(response.status_code, 200,\n                         \"Expected status code is 200 but found \"+str(response.status_code))\n    \n        # header validation\n>       self.assertion.assert_equal(response.headers.get('Content-Type'), \"application/json\",\n                         msg=\"Expected Content-Type is application/json but found \"+ response.headers.get('Content-Type'))\nE       TypeError: assert_equal() got an unexpected keyword argument 'msg'\n\nTests/test_global_quote.py:25: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_GlobalQuote",
    "time" : {
      "start" : 1611645533901,
      "stop" : 1611645533901,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: assert_equal() got an unexpected keyword argument 'msg'",
    "statusTrace" : "self = <test_global_quote.Test_GlobalQuote testMethod=test_global_quote>\n\n    def test_global_quote(self):\n        self.logger.info(\"test started\")\n        url = self.base_url+\"function=GLOBAL_QUOTE&symbol=\"+self.symbol+\"&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n    \n        self.logger.info(\"response : \"+ response.text)\n    \n        # verify status code\n        self.assertion.assert_equal(response.status_code, 200,\n                         \"Expected status code is 200 but found \"+str(response.status_code))\n    \n        # header validation\n>       self.assertion.assert_equal(response.headers.get('Content-Type'), \"application/json\",\n                         msg=\"Expected Content-Type is application/json but found \"+ response.headers.get('Content-Type'))\nE       TypeError: assert_equal() got an unexpected keyword argument 'msg'\n\nTests/test_global_quote.py:25: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d399dddbfa2be237",
      "name" : "log",
      "source" : "d399dddbfa2be237.txt",
      "type" : "text/plain",
      "size" : 648
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_GlobalQuote::0",
    "time" : {
      "start" : 1611645539473,
      "stop" : 1611645539473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Tests"
  }, {
    "name" : "suite",
    "value" : "test_global_quote"
  }, {
    "name" : "subSuite",
    "value" : "Test_GlobalQuote"
  }, {
    "name" : "host",
    "value" : "san-ThinkPad-T480"
  }, {
    "name" : "thread",
    "value" : "268115-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Tests.test_global_quote"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "448093bc977ae289.json",
  "parameterValues" : [ ]
}