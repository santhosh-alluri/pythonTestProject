{
  "uid" : "5082ce70463b86dc",
  "name" : "test_global_quote_invalid_symbol",
  "fullName" : "Tests.test_global_quote.Test_GlobalQuote#test_global_quote_invalid_symbol",
  "historyId" : "8ffcd10c126c57f538b3c8dd8e388f84",
  "time" : {
    "start" : 1611597309838,
    "stop" : 1611597310988,
    "duration" : 1150
  },
  "status" : "broken",
  "statusMessage" : "TypeError: can only concatenate str (not \"dict\") to str",
  "statusTrace" : "self = <test_global_quote.Test_GlobalQuote testMethod=test_global_quote_invalid_symbol>\n\n    def test_global_quote_invalid_symbol(self):\n        self.logger.info(\"test_time_series_daily_invalid_symbol started\")\n        url = self.base_url+\"function=GLOBAL_QUOTE&symbol=invalid&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n        self.logger.info(\"response : \" + response.text)\n        # response assertion\n        self.soft_assert(self.assertEqual, response_json['Global Quote'],\n                        {},\n>                        msg=\"response not meeted expected error\" + response_json['Global Quote'])\nE       TypeError: can only concatenate str (not \"dict\") to str\n\nTests/test_global_quote.py:61: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_GlobalQuote",
    "time" : {
      "start" : 1611597307413,
      "stop" : 1611597307413,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: can only concatenate str (not \"dict\") to str",
    "statusTrace" : "self = <test_global_quote.Test_GlobalQuote testMethod=test_global_quote_invalid_symbol>\n\n    def test_global_quote_invalid_symbol(self):\n        self.logger.info(\"test_time_series_daily_invalid_symbol started\")\n        url = self.base_url+\"function=GLOBAL_QUOTE&symbol=invalid&apikey=\"+self.apiKey\n        self.logger.info(\"url : \" + url)\n        response = requests.get(url)\n        response_json = response.json()\n        self.logger.info(\"response : \" + response.text)\n        # response assertion\n        self.soft_assert(self.assertEqual, response_json['Global Quote'],\n                        {},\n>                        msg=\"response not meeted expected error\" + response_json['Global Quote'])\nE       TypeError: can only concatenate str (not \"dict\") to str\n\nTests/test_global_quote.py:61: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "15d78d04977a8854",
      "name" : "log",
      "source" : "15d78d04977a8854.txt",
      "type" : "text/plain",
      "size" : 325
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "unittest_setUpClass_fixture_Test_GlobalQuote::0",
    "time" : {
      "start" : 1611597312344,
      "stop" : 1611597312344,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Tests"
  }, {
    "name" : "suite",
    "value" : "test_global_quote"
  }, {
    "name" : "subSuite",
    "value" : "Test_GlobalQuote"
  }, {
    "name" : "host",
    "value" : "san-ThinkPad-T480"
  }, {
    "name" : "thread",
    "value" : "224648-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Tests.test_global_quote"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5082ce70463b86dc.json",
  "parameterValues" : [ ]
}